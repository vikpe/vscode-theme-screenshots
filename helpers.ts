import { type Locator, type Page, expect } from "@playwright/test";
import { readFileSync } from "node:fs";
import path from "node:path";
import type { RemoteFilename } from "./screenshots.types";

export class Controller {
	private page: Page;

	constructor(page: Page) {
		this.page = page;
	}

	public async loadEditor(themeId: string) {
		await this.page.goto(`https://vscode.dev/editor/theme/${themeId}`);
		const installThemeButton = this.page
			.locator(".notification-list-item")
			.getByRole("button", { name: "Install" });
		await expect(installThemeButton).toBeVisible({ timeout: 8000 });
		await this.page.waitForTimeout(1500);
		await this.resetUI();
	}

	private async resetUI() {
		await this.runCommand("> notifications.toggleDoNotDisturbMode");
		await this.runCommand("> action.toggleMinimap");
		await this.runCommand("> action.closeAllEditors");
		await this.runCommand("> action.editorLayoutSingle");
	}

	private async runCommand(command: string) {
		await this.runCommands([command]);
	}

	private async runCommands(commands: string[]) {
		await this.page.keyboard.press("Control+Shift+P");
		const input = this.page.locator(
			'input[aria-describedby="quickInput_message"]',
		);

		for (const command of commands) {
			await input.fill(command);
			await input.press("Enter");
		}

		await expect(input).toBeHidden();
	}

	public async loadRemoteFile(filename: RemoteFilename) {
		await this.runCommand(`/${filename}`);
		await this.runCommand("> editor.action.reindentlines");
	}

	public async loadLocalFile(filepath: string) {
		await this.runCommand("> workbench.action.files.newUntitledFile");
		await this.runCommands([
			"> action.editor.changeLanguageMode",
			getLanguageIdByFilename(filepath),
		]);
		await this.fillEditor(readFile(filepath));
	}

	private async fillEditor(content: string) {
		const input = this.getEditorInput();
		await input.fill(content);

		// delete invalid trailing content generated by vscode
		await input.press("Shift+PageDown");
		await input.press("Delete");

		await this.gotoLine(1);
		await this.runCommand("> editor.action.reindentlines");
	}

	private async gotoLine(number: number) {
		await this.page.keyboard.press("Control+G");
		await this.page.keyboard.type(number.toString());
		await this.page.keyboard.press("Enter");
	}

	public async saveApplicationScreenshot(path: string) {
		return this.saveScreenshot(this.getApp(), path);
	}

	public async saveEditorScreenshot(path: string) {
		return this.saveScreenshot(this.getEditor(), path);
	}

	private async saveScreenshot(locator: Locator, path: string) {
		await locator.screenshot({
			animations: "disabled",
			path,
		});
	}

	private getApp(): Locator {
		return this.page.locator(".monaco-split-view2.horizontal").first();
	}

	private getEditor(): Locator {
		return this.getApp().locator(".editor-group-container.active").first();
	}

	private getEditorInput(): Locator {
		return this.page
			.locator(".editor-instance")
			.locator('textarea[aria-roledescription="editor"]')
			.first();
	}
}

function readFile(filepath: string): string {
	try {
		return readFileSync(filepath, "utf8");
	} catch (err) {
		return `(error: ${err})`;
	}
}

function getLanguageIdByFilename(filename: string): string {
	const extMap = {
		".css": "css",
		".env": "properties",
		".go": "go",
		".html": "html",
		".ini": "ini",
		".js": "javascript",
		".json": "json",
		".jsx": "javascriptreact",
		".md": "markdown",
		".php": "php",
		".ps": "powershell",
		".py": "python",
		".rb": "ruby",
		".rs": "rust",
		".scss": "scss",
		".sh": "shellscript",
		".toml": "toml",
		".ts": "typescript",
		".tsx": "typescriptreact",
		".yaml": "yaml",
	};
	const ext = path.extname(filename);
	return extMap[ext] ?? "plaintext";
}
